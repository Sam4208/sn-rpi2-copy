#include <unistd.h>
#include <stdint.h>
#include <stdio.h>
#include <asm/types.h>
#include <errno.h>	// errno
#include <stdlib.h>	// malloc
#include <string.h>    	//strstr function
#include <sys/stat.h>	// stat() function
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>

              
#include "atmelsam_ba.h"
#include "lowLevelApplet.h"
#include "flashApplet.h"

extern int verbose_flag;

int sendSamCommand(atmelsam_ba_handle *devh1, char* command);
int sendSamCommandWaitResponse(atmelsam_ba_handle *devh1, char* command, uint8_t* response, int len, int timeout);
int setModeBootFlash(atmelsam_ba_handle* devh1);
int rebootTarget(atmelsam_ba_handle *devh1);
uint8_t* getApp(char* appName, int size);
int getFileSize(char* filename);
int downloadApplet(atmelsam_ba_handle *devh1, char* fname, const uint8_t* defaultApp, int defaultSize);
int lowLevelInit(atmelsam_ba_handle *devh1);
int flashInit(atmelsam_ba_handle* devh1);

#define SIZE_FLASH_BUFFER 0xa300


int sendSamCommand(atmelsam_ba_handle *devh1, char* command)
{
	int retval;
	int len = strlen(command);
//printf("%s <%s> len:%d\r\n",__FUNCTION__,command, len);
	retval = write(devh1->fd, command,len);
	if(retval != len)
	{
		printf("%s Error writing <%s>, errno %d  %d!=%d\r\n",__FUNCTION__, command,errno,retval,len);
		return(-1);
	}
	return(0);
}


int sendSamCommandWaitResponse(atmelsam_ba_handle *devh1, char* command, uint8_t* response, int len, int maxTime)
{
	int rv;
	fd_set set;
	struct timeval timeout;
	FD_ZERO(&set); 			// clear the set 
	FD_SET(devh1->fd, &set); 	// add our file descriptor to the set 
	timeout.tv_sec = 0;
	timeout.tv_usec = 1000;	// 1 ms 

	rv = select(devh1->fd + 1, &set, NULL, NULL, &timeout);
	if(rv == -1)
	{
		printf("%s ",__FUNCTION__);
		perror("select"); /* an error accured */
		return(-1);
	}
	else if(rv == 0)
	{
//		printf("%s pre target wait timeout\r\n",__FUNCTION__); /* a timeout occured */
	}
	else
	{
		rv = read( devh1->fd, response, len ); /* there was data to read */
	}

	if(rv>0)
	{
		printf("%s buffer read before command, len: %d data:'%c' %02x\r\n",__FUNCTION__,rv, response[0], response[0]);
	}
	
	if(sendSamCommand(devh1, command)) return(-1);
	
	FD_ZERO(&set); 			// clear the set 
	FD_SET(devh1->fd, &set); 	// add our file descriptor to the set 
	timeout.tv_sec = maxTime;
	timeout.tv_usec = 10000;	// 10 ms min

	rv = select(devh1->fd + 1, &set, NULL, NULL, &timeout);
	if(rv == -1)
	{
		printf("%s ",__FUNCTION__);
		perror("select"); /* an error accured */
		return(-1);
	}
	else if(rv == 0)
	{
		printf("%s target response timeout\r\n",__FUNCTION__); /* a timeout occured */
		return(-2);
	}
	else
	{
		rv = read( devh1->fd, response, len ); /* there was data to read */
//		printf("%s resp %d '%c'\r\n",__FUNCTION__,response[0]);
	}
	return(0);
}


int setModeBootFlash(atmelsam_ba_handle* devh1)
{
	uint8_t response[0x40];
	int retval;
	int count = 5;
	retval = sendSamCommand(devh1, "W400E0A04,5A00010B#");
	if(retval)
	{
		printf("%s ERRROR unable write command",__FUNCTION__);
		return(-1);
	}
	while(1)
	{
		retval = sendSamCommandWaitResponse(devh1, "w400E0A08,5A00010B#",response,0x40,1);
		if(retval)
		{
			printf("%s ERRROR unable write command",__FUNCTION__);
			return(-1);
		}
//		printf("%s  target returned: %02x %02x %02x %02x\r\n",__FUNCTION__, response[0], response[1],response[2], response[3]);
		if(count-- ==0) break;
		if(response[0] == 1) break;
	}
	return(0);
}


int rebootTarget(atmelsam_ba_handle *devh1)
{
	return(sendSamCommand(devh1, "W400E1400,A500000D#"));
}


uint8_t* getApp(char* appName, int size)
{
	uint8_t* retval = malloc(size);
	int numRead;
	if(!retval) return(NULL);
	FILE* fp = fopen(appName,"r");
	if(!fp)
	{
		printf("%s error opening <%s>\r\n",__FUNCTION__, appName);
		return(NULL);
	}
	numRead = fread(retval,size,1,fp);
	fclose(fp);
	if(numRead != size)
	{
		printf("%s reading expected %d, got %d\r\n",__FUNCTION__, size, numRead);
		free(retval);
		return(NULL);
	}
	return(retval);
}


int getFileSize(char* filename)
{
	struct stat st;
	int retval = stat(filename, &st);
	if(retval)
	{
		printf("%s ERROR file stat() returned %d\r\n",__FUNCTION__, errno);
		return(-1);
	}
	return(st.st_size);
}

const uint32_t app_addr=0x20001000;
const uint32_t app_cmd_addr=0x20001040;

int downloadApplet(atmelsam_ba_handle *devh1, char* app_name, const uint8_t* defaultApp, int defSize)
{
	char stemp[0x40];
	int fsize;
	uint8_t* applet;
//	printf("%s\r\n",__FUNCTION__);
	if(app_name)
	{
		// get size of applet
		fsize = getFileSize(app_name);
		if(fsize <=0) return(-1);

		// read in applet
		applet = getApp(app_name, fsize);
		if(!applet) return(-2);
	}
	else
	{
		if(verbose_flag)printf("%s using default app of size %d bytes\r\n",__FUNCTION__,defSize);
		applet = (uint8_t*)defaultApp;
		fsize = defSize;
	}

	// configure target to download applet
	sprintf(stemp, "S%08x,%x#",app_addr,fsize);
//printf("%s first cmd <%s>\r\n",__FUNCTION__,stemp);
	sendSamCommand(devh1, stemp);

//printf("%s writing applet of 0x%x bytes\r\n",__FUNCTION__,fsize);
	// write applet to target
	int numWritten = write(devh1->fd,applet,fsize);
	if(app_name)free(applet);
//printf("%s wrote %d expectedt %d\r\n",__FUNCTION__,numWritten,fsize);
	if(numWritten != fsize)
	{
		printf("%s ERROR expected to write %d wrote %d instead\r\n",__FUNCTION__, fsize, numWritten);
		return(-3);
	}
	return(0);
}


int lowLevelInit(atmelsam_ba_handle* devh1)
{
        int retval;
	uint8_t response[0x40];
	if(verbose_flag) printf("%s\r\n",__FUNCTION__);

	retval = downloadApplet(devh1, devh1->lowLevelAppletFname, &lowLevelApplet[0], sizeof(lowLevelApplet));
	if(retval) return(retval);

	// set up init parameters
	sendSamCommand(devh1, "W20001040,0#");
	sendSamCommand(devh1, "W20001048,0#");
	sendSamCommand(devh1, "W2000104c,4#");
	sendSamCommand(devh1, "W20001050,0#");
	sendSamCommand(devh1, "W20001054,0#");
	sendSamCommand(devh1, "W20001058,0#");
	// start applet and wait for response
//printf("%s Go command\r\n",__FUNCTION__); 
	sendSamCommand(devh1,"G20001000#"); 
	retval= sendSamCommandWaitResponse(devh1,"w20001040,4#", response, 0x40, 3);
//printf("%s Wait Response %d \r\n",__FUNCTION__,retval);
	if(retval)
	{
		printf("%s response ERROR %d\r\n",__FUNCTION__, retval);
		return(-1);
	}
	if( (response[0]!=0xFF)  || (response[1]!=0xFF) || (response[2]!=0xFF) || (response[3]!=0xFF) )
	{
		printf("%s  ERROR target returned: %02x %02x %02x %02x\r\n",__FUNCTION__, response[0], response[1],response[2], response[3]);
	}
	devh1->isLowLevelInitDone = 1;
	return(0);
}


int flashInit(atmelsam_ba_handle* devh1)
{
        int retval;
	uint8_t response[0x40];
	if(verbose_flag) printf("%s\r\n",__FUNCTION__);

	if( devh1->isLowLevelInitDone == 0)
	{
	        retval = lowLevelInit(devh1);
	        if(retval)
	        {
			printf("%s response ERROR\r\n",__FUNCTION__);
			return(-1);
                }
        }

	retval = downloadApplet(devh1, devh1->flashAppletFname, &flashApplet[0], sizeof(flashApplet));
	if(retval) return(retval);

	// set up init parameters
	sendSamCommand(devh1, "W20001040,0#");	//cmd  APPLET_CMD_INIT
	sendSamCommand(devh1, "W20001048,0#");	// comm type, USB_COM_TYPE
	sendSamCommand(devh1, "W2000104c,4#");	// tracelevel
	sendSamCommand(devh1, "W20001050,0#");	// bank, unused

//printf("%s Go command\r\n",__FUNCTION__);
	// start applet and wait for response
	sendSamCommand(devh1, "G20001000#");

	retval= sendSamCommandWaitResponse(devh1, "w20001040,4#", response, 0x40, 3);
//printf("%s Wait Response %d \r\n",__FUNCTION__,retval); 
	if(retval)
	{
		printf("%s response ERROR\r\n",__FUNCTION__);
		return(-1);
	}
	if( (response[0]!=0xFF)  || (response[1]!=0xFF) || (response[2]!=0xFF) || (response[3]!=0xFF) )
	{
		printf("%s  ERROR target returned: %02x %02x %02x %02x\r\n",__FUNCTION__, response[0], response[1],response[2], response[3]);
	}
	return(0);
}

int flashWrite(atmelsam_ba_handle* devh1, uint8_t* bData, uint32_t length)
{
        int retval;
	uint8_t response[0x40];
	char cmd[0x40];
	if(verbose_flag)
	{
		printf("%s Writing 0x%X bytes at 0x%X (buffer Addr: 0x20001b78) ... ",__FUNCTION__,length, devh1->flashCurrentAddr);
		fflush(stdout);
	}

	sprintf(cmd,"S20001b78,%x#",length);
	sendSamCommand(devh1, cmd);		//start read buffer
	retval = write(devh1->fd, bData, length);	// send the buffer of data
	if(retval != length)
	{
		printf("%s Write buffer to target error\r\n",__FUNCTION__);	  
		return(-1);
	}
	
	// set up init parameters
	sendSamCommand(devh1, "W20001040,2#");		//cmd  WRITE
	sendSamCommand(devh1, "W20001048,20001b78#");	// buffer address

	sprintf(cmd,"W2000104c,%x#",length);
	sendSamCommand(devh1, cmd);		// buffer size

	sprintf(cmd,"W20001050,%x#",devh1->flashCurrentAddr);
	sendSamCommand(devh1, cmd);		// FLASH start write Address

//printf("%s Go command\r\n",__FUNCTION__);
	// start applet and wait for response
	sendSamCommand(devh1, "G20001000#");

	retval= sendSamCommandWaitResponse(devh1, "w20001040,4#", response, 0x40, 3);
//	printf("%s Wait Response %d \r\n",__FUNCTION__,retval); 
	
	if(retval)
	{
		printf("%s response ERROR\r\n",__FUNCTION__);
		return(-1);
	}
	if( (response[0]!=0xFD)  || (response[1]!=0xFF) || (response[2]!=0xFF) || (response[3]!=0xFF) )
	{
		printf("%s  ERROR target returned: %02x %02x %02x %02x\r\n",__FUNCTION__, response[0], response[1],response[2], response[3]);
	}
	return(0);
}

struct termios  savetty;	// this is for restoring the tty a the end of the session, but we don't cleanly close the session, fixme someday

atmelsam_ba_handle* AtmelSam_ba_init(char* target)
{
	struct termios  tty;
	int	rc;
	speed_t     spd;
	
      
	uint8_t response[0x40];
	atmelsam_ba_handle* retval = malloc(sizeof( atmelsam_ba_handle));
	if(!retval) return(NULL);

	memset(retval,0,sizeof( atmelsam_ba_handle));
	retval->lowLevelAppletFname = NULL;
	retval->flashAppletFname = NULL;
	retval->flashCurrentAddr = 0;	
	retval->isLowLevelInitDone = 0;
		
	retval->fd = open(target, O_RDWR );
	if(retval->fd == -1)
	{
		printf("%s ERROR unable to open target <%s> errno %d\r\n",__FUNCTION__, target, errno);
		free(retval);
		return(NULL);
	}
	
	rc = tcgetattr(retval->fd, &tty);
	if (rc < 0) {
		printf("%s failed to get attr: %d, %s", __FUNCTION__, rc, strerror(errno));
		exit (-2);
	}
	savetty = tty;    /* preserve original settings for restoration */

	spd = B115200;
	cfsetospeed(&tty, (speed_t)spd);
	cfsetispeed(&tty, (speed_t)spd);
	
	cfmakeraw(&tty);
	              
	tty.c_cc[VMIN] = 1;
	tty.c_cc[VTIME] = 10;
	    
	tty.c_cflag &= ~CSTOPB;
	tty.c_cflag &= ~CRTSCTS;    /* no HW flow control? */
	tty.c_cflag |= CLOCAL | CREAD;
	rc = tcsetattr(retval->fd, TCSANOW, &tty);
	if (rc < 0)
	{
		printf("%s failed to set attr: %d, %s", __FUNCTION__, rc, strerror(errno));
		exit (-3);
	}

	sendSamCommandWaitResponse(retval,"N#",response, 0x40, 1);
	return(retval);
}

int AtmelSam_ba_setInitAppletFilename(atmelsam_ba_handle* devh1, char* fname)
{
	int nameSize = strlen(fname);
	nameSize++;
	if( devh1->lowLevelAppletFname) free(devh1->lowLevelAppletFname);
	devh1->lowLevelAppletFname = malloc(nameSize);
	if(devh1->lowLevelAppletFname == NULL) return(-1);
	memcpy(devh1->lowLevelAppletFname, fname, nameSize);
	return(0);
}


int AtmelSam_ba_setFlashAppletFilename(atmelsam_ba_handle* devh1, char* fname)
{
	int nameSize = strlen(fname);
	nameSize++;
	if( devh1->flashAppletFname) free(devh1->flashAppletFname);
	devh1->flashAppletFname = malloc(nameSize);
	if(devh1->flashAppletFname == NULL) return(-1);
	memcpy(devh1->flashAppletFname, fname, nameSize);
	return(0);
}

// these step must be done before programing flash
// init instance and open target
// set target applet filenames
int AtmelSam_ba_programFlash(atmelsam_ba_handle* devh1, char* fname)
{
	int retval;

	// open binary file to put into FLASH
	FILE* fp = fopen(fname, "r");
	if(fp ==NULL)
	{
		printf("%s unable to open file <%s>\r\n",__FUNCTION__, fname);
		return(-1);
	}

	// set up target for FLASH work
	retval = flashInit(devh1);
	if(retval)
	{
		printf("%s ERROR %d\r\n",__FUNCTION__, retval);
		return(-2);
	}
//printf("%s flash applet installed and ready\r\n",__FUNCTION__);
	// temp buffer
	uint8_t* flashBuffer = malloc(SIZE_FLASH_BUFFER);
	if(flashBuffer == NULL) return(-3);

	// target FLASH destination address
	devh1->flashCurrentAddr= 0x0;

	// download application to FLASH
	while(1)
	{
		int num = fread(flashBuffer,1,SIZE_FLASH_BUFFER,fp);
		if( num == 0) break;
//		if(verbose_flag) printf("%s Writing 0x%X bytes at 0x%0X... ",__FUNCTION__, num, devh1->flashCurrentAddr);
		retval = flashWrite(devh1, flashBuffer, num);
		if(retval) break;
		devh1->flashCurrentAddr += num;
		if(verbose_flag) printf("done\r\n");
		
	}
	
	if(verbose_flag) printf("Setting boot mode to flash\r\n");
	// set boot mode
	setModeBootFlash(devh1);

	if(verbose_flag) printf("Resetting target\r\n");
	// reboot
	rebootTarget(devh1);
	return(0);
}
