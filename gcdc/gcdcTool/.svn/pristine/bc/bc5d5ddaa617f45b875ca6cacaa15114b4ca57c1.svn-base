#ifndef _GCDC_INTERFACE
#define _GCDC_INTERFACE

#include <asm/types.h>


typedef __u16 u16;
typedef __s16 s16;
typedef __u8 u8;  
typedef __s32 s32;
typedef __u32 u32;

#define OLD_OS_PATCH 1
#ifdef OLD_OS_PATCH
# if __BYTE_ORDER == __LITTLE_ENDIAN
#  define htobe16(x) __bswap_16 (x)
#  define htole16(x) (x)
#  define be16toh(x) __bswap_16 (x)
#  define le16toh(x) (x)

#  define htobe32(x) __bswap_32 (x)
#  define htole32(x) (x)
#  define be32toh(x) __bswap_32 (x)
#  define le32toh(x) (x)

#  define htobe64(x) __bswap_64 (x)
#  define htole64(x) (x)
#  define be64toh(x) __bswap_64 (x)
#  define le64toh(x) (x)
# else
#  define htobe16(x) (x)
#  define htole16(x) __bswap_16 (x)
#  define be16toh(x) (x)
#  define le16toh(x) __bswap_16 (x)

#  define htobe32(x) (x)
#  define htole32(x) __bswap_32 (x)
#  define be32toh(x) (x)
#  define le32toh(x) __bswap_32 (x)

#  define htobe64(x) (x)
#  define htole64(x) __bswap_64 (x)
#  define be64toh(x) (x)
#  define le64toh(x) __bswap_64 (x)
# endif

#endif



int gcdcInterfaceInit(int debug_level);
void gcdcInterfaceDeinit(void);

libusb_device_handle* gcdcInterfaceConnectToSerialNumber(char* serialNumber);
libusb_device_handle* gcdcInterfaceConnect(void);

void gcdcInterfaceSetOutput(FILE* fout);

int isGainHi(libusb_device_handle* devh1 );
int isAccelOn(libusb_device_handle* devh1);
int getAdcVals(libusb_device_handle* devh1, short* sData);
int isSelfTest(libusb_device_handle* devh1);
int gcdcInterfaceGainHi(libusb_device_handle* devh1);
int gcdcInterfaceGainLow(libusb_device_handle* devh1);
int gcdcInterfaceSelfTestOn(libusb_device_handle* devh1);
int gcdcInterfaceSelfTestOff(libusb_device_handle* devh1);
void selfTest(libusb_device_handle* devh1, int duration, int frequency);
int readRealTime(libusb_device_handle* devh1);


int gcdcInterfaceSetReport(libusb_device_handle* devh1, unsigned char reportId, unsigned char* dataBuffer, int dataBufferSize );
int gcdcInterfaceGetReport(libusb_device_handle* devh1, unsigned char reportId, unsigned char* dataBuffer, int dataBufferSize );

// set the time of the device to a value expicitly called out in srcTime
int gcdcInterfaceSetTime(libusb_device_handle *devh, struct tm* srcTime );
int gcdcInterfaceGetSerialNum(libusb_device_handle* devh1, char* buffer, int size);
int gcdcInterfaceGetTime(libusb_device_handle* devh1, unsigned char* data);
int gcdcInterfaceSetTimeSync(libusb_device_handle *devh1, int microSecOffset);
void gcdcInterfaceRelease(libusb_device_handle *devh1);

/* returns a list of serial numbers corresponding to devices that this interface can work with
ctx is the underlying libusb context (NULL for most applicatios)
list - an array of strings to fill in
maxEntries - size of the list
maxSize - max size of each string
*/
int gcdcInterfaceGetSerialNumbers(libusb_context *ctx, char* list[], int maxEntries, int maxSize);



struct pressureReport
{
  unsigned char reportId;
  int32_t time_sec;
  int32_t time_usec;
  int32_t pressure;
};

struct accelReport
{
  unsigned char reportId;
  u32  sec;   
  u32 usec;
  int32_t accel[3];
};


typedef struct _rptHeader
{
  uint8_t reportId;
  uint8_t numValid;
  uint8_t status;
  uint8_t reserved;
  struct timeval tm;
}  __attribute__ ((packed)) rptHeader;

#define MAX_PAYLOAD (64-sizeof( rptHeader))
typedef struct _adcDataReport
{
  rptHeader header;
  uint16_t sample[MAX_PAYLOAD/sizeof(uint16_t)];
} __attribute__ ((packed)) adcDataReport;
                                                        
                                                                
int usbInterfaceFlushQueue(libusb_device_handle *devh, int numPackets);
                                
int usbInterfaceGetRealtimePressure(libusb_device_handle *devh1, struct pressureReport* pr);
int usbInterfaceGetRealtimeAcceleration(libusb_device_handle *devh, struct accelReport* accelR);
int usbInterfaceGetRealtimeMagnetic(libusb_device_handle *devh, struct accelReport* dataR);
int usbInterfaceGetRealtimeAdcData(libusb_device_handle *devh, adcDataReport* dataR);
//int getAccelVals(libusb_device_handle *devh, short * sData);

int gcdcInterfaceSmbusRead(libusb_device_handle *devh, u8 device, u8 offset, u8* buffer, u8 len);
int gcdcInterfaceSmbusWrite(libusb_device_handle *devh, u8 device, u8 offset, u8* buffer, u8 len);

libusb_device_handle** gcdcInterfaceConnectToAvailableDevices(libusb_context *ctx);
int gcdcInterfaceDeviceControl(libusb_device_handle *devh, char* cmd, char* buffer);
                                                                                
#endif

